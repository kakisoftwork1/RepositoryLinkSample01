name: Synchronize Target Repository
on: [push]
# on:
#   push:
#     branches:
#       - develop
  # pull_request:
  #   types: [closed]
env:
  MY_ACCOUNT_NAME: kakisoftwork1                                     # 
  TARGET_REPOSITORY_NAME: RepositoryLinkSample02                     # 同期対象のリポジトリ（末尾に ".git" は不要） ※clone先のディレクトリ名としても使用します
  SOURCE_DIRECTORY: core/APISpecifications                           # コピー元のファイルを存在するディレクトリパス
  TARGET_OPAN_API_FILE: petstore.yaml                                # OpenAPI仕様書のファイル名（コピー対象のファイル名）
  DESTINATION_DIRECTORY: RepositoryLinkSample02/APISpecifications    # コピー先（同期先）のファイルを格納するディレクトリ
  USER_NAME : Your Name                                              # git push時のユーザ名
  USER_EMAIL : your.email@example.com                                # git push時のメールアドレス
jobs:
    #===================================
    #   異なるリポジトリとファイルを同期
    #===================================
    synchronize-target-repository:
      runs-on: ubuntu-22.04
      steps:
      - name: Checkout My Repository
        uses: actions/checkout@v4

      - name: Show source directoriy's file list
        run: ls ${{ env.SOURCE_DIRECTORY }}

      # 変更が無い場合、処理を終了する
      - name: Check for changes
        continue-on-error: true
        id: check_for_changes
        run: |
            if diff -q ${{ env.SOURCE_DIRECTORY }}/${{ env.TARGET_OPAN_API_FILE }} ${{ env.SOURCE_DIRECTORY }}/petstore2.yaml; then
                # 差分が無かった場合
                echo "is_editted=0" >> $GITHUB_OUTPUT
            else
                # 差分があった場合
                echo "is_editted=1" >> $GITHUB_OUTPUT
            fi

      # 後続の処理１
      - name: Step 3
        run: echo "This is step 3 - Output was ${{ steps.check_for_changes.outputs.is_editted }}"

      # 後続の処理２
      - name: Step 4
        if: steps.check_for_changes.outputs.is_editted == 1
        run: echo "execute step4"





      # # 変更がある場合、同期先のリポジトリに pushする
      # - name: Commit and push changes
      #   if: steps.check_changes.outputs.result == 'Changes detected'
      #   run: |
      #       cd ${{ env.TARGET_REPOSITORY_NAME }}
      #       git config --global user.name "${{ env.TARGET_REPOSITORY_NAME }}"
      #       git config --global user.email "${{ env.TARGET_REPOSITORY_NAME }}"
      #       git add .
      #       git commit -m "Update OpenAPI pecification file"
      #       git push
